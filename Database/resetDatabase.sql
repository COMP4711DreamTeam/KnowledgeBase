DROP TABLE IF EXISTS MESSAGES;
DROP TABLE IF EXISTS CONVERSATIONS;
DROP TABLE IF EXISTS POSTS;
DROP TABLE IF EXISTS DISCUSSIONS;
DROP TABLE IF EXISTS TOPICS;
DROP TABLE IF EXISTS USER_LIKES;
DROP TABLE IF EXISTS USERS;

CREATE TABLE IF NOT EXISTS USERS (
	ID int NOT NULL, 
    PASSWORD varchar(255) NOT NULL, 
    FIRST_NAME varchar(255) NOT NULL, 
    LAST_NAME varchar(255) NOT NULL, 
    EMAIL varchar(255) NOT NULL, 
    PROFILE_IMAGE_URL varchar(255) NOT NULL, 
    COUNTRY varchar(255) NOT NULL, 
    DATE_OF_BIRTH DATETIME NOT NULL, 
    ABOUT varchar(255) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS USER_LIKES (
    USER_ID int NOT NULL,
    LIKED_USER_ID int NOT NULL,
    FOREIGN KEY(USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY(LIKED_USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS TOPICS (
	ID int NOT NULL, 
    TOPIC varchar(255) NOT NULL, 
    PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS DISCUSSIONS (
	ID int NOT NULL, 
    TOPIC_ID int NOT NULL, 
    USER_ID int NOT NULL, 
    TITLE varchar(500) NOT NULL, 
    DATE DATE NOT NULL, 
    BODY varchar(2000) NOT NULL, 
    PRIMARY KEY (ID),
    FOREIGN KEY (TOPIC_ID) REFERENCES TOPICS(ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS POSTS (
	ID int NOT NULL, 
    DISCUSSION_ID int NOT NULL, 
    USER_ID int NOT NULL, 
    POST_BODY varchar(2000) NOT NULL, 
    PRIMARY KEY (ID),
    FOREIGN KEY (DISCUSSION_ID) REFERENCES DISCUSSIONS(ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS CONVERSATIONS (
	ID int NOT NULL, 
    USER_ID_1 int NOT NULL, 
    USER_ID_2 int NOT NULL, 
    DATE DATE NOT NULL,
    SUBJECT varchar(500) NOT NULL, 
    PRIMARY KEY (ID),
    FOREIGN KEY (USER_ID_1) REFERENCES USERS(ID),
    FOREIGN KEY (USER_ID_2) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS MESSAGES (
	ID int NOT NULL, 
    CONVERSATION_ID int NOT NULL, 
    USER_ID int NOT NULL, 
    DATE_TIME DATETIME NOT NULL,
    MESSAGE_BODY varchar(2000) NOT NULL, 
    PRIMARY KEY (ID),
    FOREIGN KEY (CONVERSATION_ID) REFERENCES CONVERSATIONS(ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

