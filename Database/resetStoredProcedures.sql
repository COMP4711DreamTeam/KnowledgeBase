
-- TOPIC SCRIPTS

-- GET TOPICS
DROP PROCEDURE IF EXISTS GET_TOPICS;
CREATE PROCEDURE GET_TOPICS (_ID int)
BEGIN
    SELECT 
        ID,
        TOPIC
    FROM TOPICS
    WHERE
        ID = IFNULL(_ID, ID);
END;


-- USER SCRIPTS

-- GET USER MATCHING EMAIL + PASSWORD
DROP PROCEDURE IF EXISTS GET_USER_PER_EMAIL_PASSWORD;
CREATE PROCEDURE GET_USER_PER_EMAIL_PASSWORD (_EMAIL varchar(255), _PASSWORD varchar(255))
BEGIN
    SELECT
        ID,
        FIRST_NAME,
        LAST_NAME,
        PROFILE_IMAGE_URL,
        DATE_OF_BIRTH,
        EMAIL,
        COUNTRY,
		(SELECT COUNT(LIKED_USER_ID) FROM USER_LIKES WHERE LIKED_USER_ID  = u.ID),
        ABOUT,
        (SELECT COUNT(ID) FROM DISCUSSIONS WHERE USER_ID = u.ID) AS DISCUSSION_COUNT,
        (SELECT COUNT(ID) FROM MESSAGES WHERE USER_ID = u.ID) AS MESSAGE_COUNT
    FROM USERS u
    WHERE 
        EMAIL = _EMAIL AND PASSWORD = _PASSWORD;
END;
    
-- GET PRIVATE USER INFO
DROP PROCEDURE IF EXISTS GET_PRIVATE_USER_INFO;
CREATE PROCEDURE GET_PRIVATE_USER_INFO (_ID int)
BEGIN
	SELECT
		ID,
		FIRST_NAME,
		LAST_NAME,
		PROFILE_IMAGE_URL,
		DATE_OF_BIRTH,
		EMAIL,
		COUNTRY,
		(SELECT COUNT(LIKED_USER_ID) FROM USER_LIKES WHERE LIKED_USER_ID  = _ID),
		ABOUT,
		(SELECT COUNT(ID) FROM DISCUSSIONS WHERE u.ID = USER_ID) AS DISCUSSION_COUNT,
		(SELECT COUNT(ID) FROM MESSAGES WHERE USER_ID = u.ID) AS MESSAGE_COUNT
	FROM USERS u
	WHERE 
		ID = _ID;
END;
    
-- GET PUBLIC USER INFO
DROP PROCEDURE IF EXISTS GET_PUBLIC_USER_INFO;
CREATE PROCEDURE GET_PUBLIC_USER_INFO (_ID int)
BEGIN
    SELECT 
        ID,
        FIRST_NAME,
        LAST_NAME,
        PROFILE_IMAGE_URL,
        COUNTRY,
		(SELECT COUNT(LIKED_USER_ID) FROM USER_LIKES WHERE LIKED_USER_ID  = _ID),
        ABOUT,
        (SELECT COUNT(ID) FROM DISCUSSIONS WHERE u.ID = USER_ID) AS DISCUSSION_COUNT
    FROM USERS u
    WHERE 
        ID = _ID;
END;

-- LIKE USER
DROP PROCEDURE IF EXISTS LIKE_USER;
CREATE PROCEDURE LIKE_USER (_ID int, _LIKED_USER_ID int)
BEGIN
    IF EXISTS (SELECT USER_ID FROM USER_LIKES WHERE USER_ID = _ID AND LIKED_USER_ID = _LIKED_USER_ID) THEN
        DELETE FROM USER_LIKES
        WHERE USER_ID = _ID AND LIKED_USER_ID = _LIKED_USER_ID;
    ELSE
        INSERT INTO USER_LIKES
        VALUES (_ID, _LIKED_USER_ID);
    END IF;
END;

-- MODIFY USER
DROP PROCEDURE IF EXISTS MODIFY_USER;
CREATE PROCEDURE MODIFY_USER (_ID int, _FIRST_NAME varchar(255), _LAST_NAME varchar(255), _EMAIL varchar(255), _PROFILE_IMAGE_URL varchar(255), _COUNTRY varchar(255), _ABOUT varchar(255))
BEGIN
    SET @EMAIL = IFNULL(_EMAIL, (SELECT EMAIL FROM USERS WHERE ID = _ID));
    SET @FIRST_NAME = IFNULL(_FIRST_NAME, (SELECT FIRST_NAME FROM USERS WHERE ID = _ID));
    SET @LAST_NAME = IFNULL(_LAST_NAME, (SELECT LAST_NAME FROM USERS WHERE ID = _ID));
    SET @PROFILE_IMAGE_URL = IFNULL(_PROFILE_IMAGE_URL, (SELECT PROFILE_IMAGE_URL FROM USERS WHERE ID = _ID));
    SET @COUNTRY = IFNULL(_COUNTRY, (SELECT COUNTRY FROM USERS WHERE ID = _ID));
    SET @ABOUT = IFNULL(_ABOUT, (SELECT ABOUT FROM USERS WHERE ID = _ID));
    UPDATE USERS
    SET
        EMAIL = @EMAIL,
        FIRST_NAME = @FIRST_NAME,
        LAST_NAME = @LAST_NAME,
        PROFILE_IMAGE_URL = @PROFILE_IMAGE_URL,
        COUNTRY = @COUNTRY,
        ABOUT = @ABOUT
    WHERE
        ID = _ID;
END;
    
-- CREATE USER
DROP PROCEDURE IF EXISTS CREATE_USER;
CREATE PROCEDURE CREATE_USER (_PASSWORD varchar(255), _FIRST_NAME varchar(255), _LAST_NAME varchar(255), _EMAIL varchar(255), _PROFILE_IMAGE_URL varchar(255), _COUNTRY varchar(255), _DATE_OF_BIRTH DATE, _ABOUT varchar(255))
BEGIN
    SET @ID = (SELECT IF(EXISTS(SELECT 1 FROM USERS), (SELECT MAX(ID) + 1 FROM USERS), 1));
    INSERT INTO USERS
    VALUES (@ID, _PASSWORD, _FIRST_NAME, _LAST_NAME, _EMAIL, _PROFILE_IMAGE_URL, _COUNTRY, _DATE_OF_BIRTH, _ABOUT);
END;

-- DISCUSSION SCRIPTS

-- GET USER'S DISCUSSIONS
DROP PROCEDURE IF EXISTS GET_USER_DISCUSSIONS;
CREATE PROCEDURE GET_USER_DISCUSSIONS (_USER_ID int)
BEGIN
    SELECT 
        ID,
        (SELECT TOPIC FROM TOPICS WHERE ID = d.TOPIC_ID) AS TOPIC,
        (SELECT PROFILE_IMAGE_URL FROM USERS WHERE ID = d.USER_ID) AS PROFILE_IMG_URL,
        TITLE,
        BODY,
        DATE,
        (SELECT COUNT(ID) FROM POSTS WHERE DISCUSSION_ID = d.ID) AS REPLY_COUNT
    FROM DISCUSSIONS d
    WHERE
        USER_ID = _USER_ID;
END;
    
-- GET ALL DISCUSSIONS IN ORDER OF MOST RECENT
DROP PROCEDURE IF EXISTS GET_ALL_DISCUSSIONS;
CREATE PROCEDURE GET_ALL_DISCUSSIONS ()
BEGIN
    SELECT 
        ID,
        (SELECT TOPIC FROM TOPICS WHERE ID = d.TOPIC_ID) AS TOPIC,
        (SELECT PROFILE_IMAGE_URL FROM USERS WHERE ID = d.USER_ID) AS PROFILE_IMG_URL,
        TITLE,
        BODY,
        DATE,
        (SELECT COUNT(ID) FROM POSTS WHERE DISCUSSION_ID = d.ID) AS REPLY_COUNT
    FROM DISCUSSIONS d
    ORDER BY DATE DESC;
END;

-- GET DISCUSSIONS BASED ON SEARCH
DROP PROCEDURE IF EXISTS GET_DISCUSSIONS_WITH_SEARCH;
CREATE PROCEDURE GET_DISCUSSIONS_WITH_SEARCH (_TOPIC int, _SEARCH_PHRASE varchar(255))
BEGIN
    SELECT 
        ID,
        (SELECT TOPIC FROM TOPICS WHERE ID = d.TOPIC_ID) AS TOPIC,
        (SELECT PROFILE_IMAGE_URL FROM USERS WHERE ID = d.USER_ID) AS PROFILE_IMG_URL,
        TITLE,
        BODY,
        DATE,
        (SELECT COUNT(ID) FROM POSTS WHERE DISCUSSION_ID = d.ID) AS REPLY_COUNT
    FROM DISCUSSIONS d
    WHERE
        TOPIC_ID = IFNULL(_TOPIC, TOPIC_ID) AND TITLE LIKE CONCAT('%', _SEARCH_PHRASE, '%');
END;
    
-- GET POSTS FOR DISCUSSION
DROP PROCEDURE IF EXISTS GET_POSTS_FOR_DISCUSSION;
CREATE PROCEDURE GET_POSTS_FOR_DISCUSSION (_DISCUSSION_ID int)
BEGIN
    SELECT 
        ID,
        (SELECT PROFILE_IMAGE_URL FROM USERS WHERE ID = p.USER_ID) AS PROFILE_IMG_URL,
        POST_BODY
    FROM POSTS p
        WHERE DISCUSSION_ID = _DISCUSSION_ID;
END;
    
-- CREATE DISCUSSION
DROP PROCEDURE IF EXISTS CREATE_DISCUSSION;
CREATE PROCEDURE CREATE_DISCUSSION (_USER_ID int, _TOPIC_ID int, _TITLE varchar(500), _BODY varchar(2000))
BEGIN
    SET @ID = (SELECT IF(EXISTS(SELECT 1 FROM DISCUSSIONS), (SELECT MAX(ID) + 1 FROM DISCUSSIONS), 0));
    INSERT INTO DISCUSSIONS
    VALUES (@ID, _TOPIC_ID, _USER_ID, _TITLE, CURRENT_DATE(), _BODY);
END;

-- CREATE POST
DROP PROCEDURE IF EXISTS CREATE_POST;
CREATE PROCEDURE CREATE_POST (_USER_ID int, _DISCUSSION_ID int, _POST_BODY varchar(2000))
BEGIN
    SET @ID = (SELECT IF(EXISTS(SELECT 1 FROM POSTS), (SELECT MAX(ID) + 1 FROM POSTS), 0));
    INSERT INTO POSTS
    VALUES (@ID, _DISCUSSION_ID, _USER_ID, _POST_BODY);
END;


-- CONVERSATION SCRIPTS

-- GET USER'S CONVERSATIONS
DROP PROCEDURE IF EXISTS GET_USER_CONVERSATIONS;
CREATE PROCEDURE GET_USER_CONVERSATIONS (_USER_ID int)
BEGIN
    SELECT 
        ID,
        (SELECT PROFILE_IMAGE_URL FROM USERS WHERE (ID = c.USER_ID_1 OR ID = c.USER_ID_2) AND ID != _USER_ID) AS PROFILE_IMG_URL,
        SUBJECT,
        DATE
    FROM CONVERSATIONS c
    WHERE
        USER_ID_1 = _USER_ID OR USER_ID_2 = _USER_ID;
END;
        
-- GET MESSAGES FOR CONVERSATION
DROP PROCEDURE IF EXISTS GET_MESSAGES_FOR_CONVERSATION;
CREATE PROCEDURE GET_MESSAGES_FOR_CONVERSATION (_CONVERSATION_ID int)
BEGIN
    SELECT
        ID,
        (SELECT PROFILE_IMAGE_URL FROM USERS WHERE ID = m.USER_ID) AS PROFILE_IMG_URL,
        MESSAGE_BODY,
        DATE_TIME
    FROM MESSAGES m
    WHERE
        CONVERSATION_ID = _CONVERSATION_ID;
END;

-- CREATE CONVERSATION
DROP PROCEDURE IF EXISTS CREATE_CONVERSATION;
CREATE PROCEDURE CREATE_CONVERSATION (_USER_ID int, _DESTINATION_USER_ID int, _SUBJECT varchar(500), _MESSAGE_BODY varchar(2000))
BEGIN
    SET @CONVERSATION_ID = (SELECT IF(EXISTS(SELECT 1 FROM CONVERSATIONS), (SELECT MAX(ID) + 1 FROM CONVERSATIONS), 0));
    INSERT INTO CONVERSATIONS
    VALUES (@CONVERSATION_ID, _USER_ID, _DESTINATION_USER_ID, CURRENT_DATE(), _SUBJECT);
    SET @MESSAGE_ID = (SELECT IF(EXISTS(SELECT 1 FROM MESSAGES), (SELECT MAX(ID) + 1 FROM MESSAGES), 0));
    INSERT INTO MESSAGES
    VALUES (@MESSAGE_ID, @CONVERSATION_ID, _USER_ID, NOW(), _MESSAGE_BODY);
END;

